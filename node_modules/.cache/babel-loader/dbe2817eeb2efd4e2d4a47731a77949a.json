{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { addDriverSuccessful, fetchDriverSuccessful, fetchDriverFailed, addDriverFailed, deleteDriverSuccessful, deleteDriverFailed } from './actions';\nimport { ADD_DRIVER, FETCH_DRIVER, DELETE_DRIVER } from './actionTypes';\nimport API from '../../helpers/api';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\nfunction* addDriver({\n  payload\n}) {\n  try {\n    const data = yield call(API, \"drivers\", \"post\", payload.data); // yield put(addDriverSuccessful(data));\n\n    payload.history.push('/driver-list');\n  } catch (error) {\n    yield put(addDriverFailed(error));\n  }\n}\n\nexport function* watchAddDriver() {\n  yield takeEvery(ADD_DRIVER, addDriver);\n}\nexport function* addDriverSaga() {\n  yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n  try {\n    const data = yield call(API, \"drivers\", \"get\");\n    yield put(fetchDriverSuccessful(data));\n  } catch (error) {\n    console.log(error);\n    yield put(fetchDriverFailed(error));\n  }\n}\n\nexport function* watchFetchDriver() {\n  yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\nexport function* fetchDriverSaga() {\n  yield all([fork(watchFetchDriver)]);\n}\n\nfunction* deleteDriver(data) {\n  try {\n    yield call(API, `drivers/${data.id}`, \"delete\");\n    yield put(deleteDriverSuccessful(data.id));\n  } catch (error) {\n    yield put(deleteDriverFailed(error));\n  }\n}\n\nexport function* watchDeleteDriver() {\n  yield takeEvery(DELETE_DRIVER, deleteDriver);\n}\nexport function* deleteDriverSaga() {\n  yield all([fork(watchDeleteDriver)]);\n}","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/driver/saga.js"],"names":["fork","put","all","call","takeEvery","addDriverSuccessful","fetchDriverSuccessful","fetchDriverFailed","addDriverFailed","deleteDriverSuccessful","deleteDriverFailed","ADD_DRIVER","FETCH_DRIVER","DELETE_DRIVER","API","axios","useHistory","addDriver","payload","data","history","push","error","watchAddDriver","addDriverSaga","fetchDriver","console","log","watchFetchDriver","fetchDriverSaga","deleteDriver","id","watchDeleteDriver","deleteDriverSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,mBAAT,EAA8BC,qBAA9B,EAAqDC,iBAArD,EAAwEC,eAAxE,EAAyFC,sBAAzF,EAAiHC,kBAAjH,QAA0I,WAA1I;AAEA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,aAAnC,QAAwD,eAAxD;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAGA,UAAUC,SAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAiC;AAC7B,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACW,GAAD,EAAM,SAAN,EAAiB,MAAjB,EAAyBI,OAAO,CAACC,IAAjC,CAAvB,CADA,CAEI;;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAgBC,IAAhB,CAAqB,cAArB;AACH,GAJL,CAKA,OAAOC,KAAP,EAAc;AACV,UAAMrB,GAAG,CAACO,eAAe,CAACc,KAAD,CAAhB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMnB,SAAS,CAACO,UAAD,EAAaM,SAAb,CAAf;AACH;AAED,OAAO,UAAUO,aAAV,GAA0B;AAC7B,QAAMtB,GAAG,CAAC,CAACF,IAAI,CAACuB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,UAAUE,WAAV,GAAwB;AACpB,MAAI;AACA,UAAMN,IAAI,GAAG,MAAMhB,IAAI,CAACW,GAAD,EAAM,SAAN,EAAiB,KAAjB,CAAvB;AACI,UAAMb,GAAG,CAACK,qBAAqB,CAACa,IAAD,CAAtB,CAAT;AACP,GAHD,CAIA,OAAOG,KAAP,EAAc;AACVI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAMrB,GAAG,CAACM,iBAAiB,CAACe,KAAD,CAAlB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUM,gBAAV,GAA6B;AAChC,QAAMxB,SAAS,CAACQ,YAAD,EAAea,WAAf,CAAf;AACH;AAGD,OAAO,UAAUI,eAAV,GAA4B;AAC/B,QAAM3B,GAAG,CAAC,CAACF,IAAI,CAAC4B,gBAAD,CAAL,CAAD,CAAT;AACH;;AAED,UAAUE,YAAV,CAAuBX,IAAvB,EAA6B;AACzB,MAAI;AACA,UAAMhB,IAAI,CAACW,GAAD,EAAO,WAAUK,IAAI,CAACY,EAAG,EAAzB,EAA4B,QAA5B,CAAV;AACA,UAAM9B,GAAG,CAACQ,sBAAsB,CAACU,IAAI,CAACY,EAAN,CAAvB,CAAT;AACC,GAHL,CAIA,OAAOT,KAAP,EAAc;AACV,UAAMrB,GAAG,CAACS,kBAAkB,CAACY,KAAD,CAAnB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUU,iBAAV,GAA8B;AACjC,QAAM5B,SAAS,CAACS,aAAD,EAAgBiB,YAAhB,CAAf;AACH;AAED,OAAO,UAAUG,gBAAV,GAA6B;AAChC,QAAM/B,GAAG,CAAC,CAACF,IAAI,CAACgC,iBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { addDriverSuccessful, fetchDriverSuccessful ,fetchDriverFailed, addDriverFailed, deleteDriverSuccessful, deleteDriverFailed} from './actions';\n\nimport { ADD_DRIVER, FETCH_DRIVER, DELETE_DRIVER } from './actionTypes';\nimport API from '../../helpers/api';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction* addDriver( {payload} ) {\n    try {\n        const data = yield call(API, \"drivers\", \"post\", payload.data);\n            // yield put(addDriverSuccessful(data));\n            payload.history.push('/driver-list');\n        }\n    catch (error) {\n        yield put(addDriverFailed(error));\n    }\n}\n\nexport function* watchAddDriver() {\n    yield takeEvery(ADD_DRIVER, addDriver);\n}\n\nexport function* addDriverSaga() {\n    yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n    try {\n        const data = yield call(API, \"drivers\", \"get\");\n            yield put(fetchDriverSuccessful(data));\n    }\n    catch (error) {\n        console.log(error)\n        yield put(fetchDriverFailed(error));\n    }\n}\n\nexport function* watchFetchDriver() {\n    yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\n\n\nexport function* fetchDriverSaga() {\n    yield all([fork(watchFetchDriver)]);\n}\n\nfunction* deleteDriver(data) {\n    try {\n        yield call(API, `drivers/${data.id}`, \"delete\");\n        yield put(deleteDriverSuccessful(data.id))\n        }\n    catch (error) {\n        yield put(deleteDriverFailed(error));\n    }\n}\n\nexport function* watchDeleteDriver() {\n    yield takeEvery(DELETE_DRIVER, deleteDriver);\n}\n\nexport function* deleteDriverSaga() {\n    yield all([fork(watchDeleteDriver)]);\n}\n\n"]},"metadata":{},"sourceType":"module"}