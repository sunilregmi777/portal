{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/Driver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport AddDriver from './AddDriver';\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardBody, CardTitle, Container, Row, Col, FormGroup, Input } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport _ from \"lodash/fp\";\nimport { fetchDriver, switchEditMode } from '../../store/actions';\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Driver(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const driverId = props.match.params.id;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-driver\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt--5\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: \"6\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"mb-0\",\n                children: \"Add Driver\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit(OnSubmit),\n                children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      className: \"form-control-label col-form-label\",\n                      htmlFor: \"firstname\",\n                      children: \"First Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 40,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 39,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"9\",\n                    children: [/*#__PURE__*/_jsxDEV(Input, {\n                      name: \"firstname\",\n                      className: firstNameClass,\n                      placeholder: \"First Name\",\n                      type: \"text\",\n                      onChange: e => {\n                        if (e.target.value.length > 0) {\n                          setFirstNameClass(errors.firstname ? \"is-invalid\" : \"is-valid\");\n                        } else setFirstNameClass(\"is-invalid\");\n                      },\n                      innerRef: register({\n                        required: true,\n                        pattern: /^[A-Za-z]+[A-Za-z]/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 48,\n                      columnNumber: 49\n                    }, this), _.get(\"firstname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 65,\n                      columnNumber: 53\n                    }, this), _.get(\"firstname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"Name should be letters only\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 47,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      className: \"form-control-label col-form-label\",\n                      htmlFor: \"lastname\",\n                      children: \"Last Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 74,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"9\",\n                    children: [/*#__PURE__*/_jsxDEV(Input, {\n                      name: \"lastname\",\n                      className: lastNameClass,\n                      onChange: e => {\n                        if (e.target.value.length > 0) {\n                          setLastNameClass(errors.lastname ? \"is-invalid\" : \"is-valid\");\n                        } else setLastNameClass(\"is-invalid\");\n                      },\n                      placeholder: \"Last Name\",\n                      type: \"text\",\n                      innerRef: register({\n                        required: true,\n                        pattern: /^[A-Za-z]+[A-Za-z]/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 82,\n                      columnNumber: 49\n                    }, this), _.get(\"lastname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 53\n                    }, this), _.get(\"lastname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"Name should be letters only\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      className: \"form-control-label col-form-label\",\n                      htmlFor: \"email\",\n                      children: \"Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 108,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"9\",\n                    children: [/*#__PURE__*/_jsxDEV(Input, {\n                      name: \"email\",\n                      className: emailClass,\n                      onChange: e => {\n                        if (e.target.value.length > 0) {\n                          setEmailClass(errors.email ? \"is-invalid\" : \"is-valid\");\n                        } else setEmailClass(\"is-invalid\");\n                      },\n                      placeholder: \"Email\",\n                      type: \"email\",\n                      innerRef: register({\n                        required: true,\n                        pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 116,\n                      columnNumber: 49\n                    }, this), _.get(\"email.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 53\n                    }, this), _.get(\"email.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"Invalid Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      className: \"form-control-label col-form-label\",\n                      htmlFor: \"mobile\",\n                      children: \"Mobile\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: \"9\",\n                    children: [/*#__PURE__*/_jsxDEV(Input, {\n                      name: \"mobile\",\n                      className: mobileClass,\n                      onChange: e => {\n                        if (e.target.value.length > 0) {\n                          setMobileClass(errors.mobile ? \"is-invalid\" : \"is-valid\");\n                        } else setMobileClass(\"is-invalid\");\n                      },\n                      placeholder: \"Phone No\",\n                      type: \"number\",\n                      innerRef: register({\n                        required: true,\n                        pattern: /^(98|97)([0-9]{8}$)/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 49\n                    }, this), _.get(\"mobile.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 53\n                    }, this), _.get(\"mobile.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"10 digit number and starts with 98 or 97\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  className: \"float-right\",\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      type: \"submit\",\n                      className: \"btn-info\",\n                      children: \"Submit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Driver, \"+Nrz0BYUZDnkIuhmBbPsJSfSlWM=\", false, function () {\n  return [useForm];\n});\n\n_c = Driver;\nexport default Driver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Driver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/Driver.js"],"names":["React","useEffect","useState","AddDriver","Breadcrumb","BreadcrumbItem","Button","Card","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","useForm","_","fetchDriver","switchEditMode","connect","Driver","props","register","handleSubmit","watch","errors","driverId","match","params","id","OnSubmit","firstNameClass","e","target","value","length","setFirstNameClass","firstname","required","pattern","get","lastNameClass","setLastNameClass","lastname","emailClass","setEmailClass","email","mobileClass","setMobileClass","mobile"],"mappings":"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","sourcesContent":["import React , {useEffect, useState} from \"react\";\nimport AddDriver from './AddDriver';\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport _ from \"lodash/fp\";\nimport { fetchDriver, switchEditMode } from '../../store/actions';\nimport { connect } from \"react-redux\";\n\n\nfunction Driver(props){\n\n\tconst { register, handleSubmit, watch, errors } = useForm();\n\tconst driverId =  props.match.params.id;\n\n\treturn(\n\t\t<div className=\"view-driver\">\n                <Container className=\"mt--5\" fluid>\n                    <Row>\n                        <Col lg=\"6\">\n                            <Card>\n                                <CardHeader>\n                                    <h3 className=\"mb-0\">Add Driver</h3>\n                                </CardHeader>\n                                <CardBody>\n                                    <form onSubmit={handleSubmit(OnSubmit)}>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"firstname\"\n                                                >\n                                                First Name\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"firstname\"\n                                                    className={firstNameClass}\n                                                    placeholder=\"First Name\"\n                                                    type=\"text\"\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setFirstNameClass(errors.firstname?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setFirstNameClass(\"is-invalid\")\n                                                    }}                                                \n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Za-z]+[A-Za-z]/i \n                                                    })}\n                                                />\n                                                {_.get(\"firstname.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"firstname.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Name should be letters only</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"lastname\"\n                                                >\n                                                Last Name\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"lastname\"\n                                                    className={lastNameClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setLastNameClass(errors.lastname?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setLastNameClass(\"is-invalid\")\n                                                    }}     \n                                                    placeholder=\"Last Name\"\n                                                    type=\"text\"\n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Za-z]+[A-Za-z]/i \n                                                    })}\n                                                />\n                                                {_.get(\"lastname.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"lastname.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Name should be letters only</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"email\"\n                                                >\n                                                Email\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"email\"\n                                                    className={emailClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setEmailClass(errors.email?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setEmailClass(\"is-invalid\")\n                                                    }}  \n                                                    placeholder=\"Email\"\n                                                    type=\"email\"\n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                                                  })}\n                                                />\n                                                {_.get(\"email.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"email.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Invalid Email</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"mobile\"\n                                                >\n                                                Mobile\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"mobile\"\n                                                    className={mobileClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setMobileClass(errors.mobile?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setMobileClass(\"is-invalid\")\n                                                    }} \n                                                    placeholder=\"Phone No\"\n                                                    type=\"number\"\n                                                    innerRef={register({\n                                                        required: true,\n                                                        pattern: /^(98|97)([0-9]{8}$)/i\n                                                    })}\n                                                />\n                                               {_.get(\"mobile.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"mobile.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">10 digit number and starts with 98 or 97</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <Row className=\"float-right\">\n                                            <Col>\n                                                <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                                            </Col>\n                                        </Row>\n                                    </form>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n    </div>\n\t);\n}\n\nexport default Driver;\n"]},"metadata":{},"sourceType":"module"}