{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/info/BasicInfo.js\",\n    _s = $RefreshSig$();\n\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardHeader, CardBody, CardTitle, Container, Row, Col, FormGroup, Input, Label } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from 'react';\nimport _ from \"lodash/fp\";\nimport '../driver.scss';\nimport API from '../../../helpers/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddDriver(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm({\n    mode: 'onChange'\n  });\n  const history = useHistory();\n  const [drivers, setDrivers] = useState([]);\n\n  const OnSubmit = async data => {\n    const response = await API('drivers', 'POST', data);\n\n    if (response.id) {\n      history.push('/driver-list');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      lg: \"6\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: \"Add Driver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(OnSubmit),\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"firstname\",\n                  children: \"First Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"firstname\",\n                  className: errors.firstname ? \"is-invalid\" : \"is-valid\",\n                  placeholder: \"First Name\",\n                  type: \"text\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 37\n                }, this), _.get(\"firstname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 41\n                }, this), _.get(\"firstname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Name should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"lastname\",\n                  children: \"Last Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"lastname\",\n                  className: lastNameClass,\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setLastNameClass(errors.lastname ? \"is-invalid\" : \"is-valid\");\n                    } else setLastNameClass(\"is-invalid\");\n                  },\n                  placeholder: \"Last Name\",\n                  type: \"text\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 37\n                }, this), _.get(\"lastname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 41\n                }, this), _.get(\"lastname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Name should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"email\",\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"email\",\n                  className: emailClass,\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setEmailClass(errors.email ? \"is-invalid\" : \"is-valid\");\n                    } else setEmailClass(\"is-invalid\");\n                  },\n                  placeholder: \"Email\",\n                  type: \"email\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 37\n                }, this), _.get(\"email.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 41\n                }, this), _.get(\"email.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Invalid Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"mobile\",\n                  children: \"Mobile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"mobile\",\n                  className: mobileClass,\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setMobileClass(errors.mobile ? \"is-invalid\" : \"is-valid\");\n                    } else setMobileClass(\"is-invalid\");\n                  },\n                  placeholder: \"Phone No\",\n                  type: \"number\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^(98|97)([0-9]{8}$)/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 37\n                }, this), _.get(\"mobile.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 41\n                }, this), _.get(\"mobile.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"10 digit number and starts with 98 or 97\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              className: \"float-right\",\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  className: \"btn-info\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddDriver, \"bVGQ4gK4ILmtYSEIGD+KTijPzuI=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = AddDriver;\nexport default AddDriver;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDriver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/info/BasicInfo.js"],"names":["Breadcrumb","BreadcrumbItem","Button","Card","CardHeader","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","Label","useForm","useHistory","React","useEffect","useState","_","API","AddDriver","props","register","handleSubmit","watch","errors","mode","history","drivers","setDrivers","OnSubmit","data","response","id","push","firstname","required","pattern","get","lastNameClass","e","target","value","length","setLastNameClass","lastname","emailClass","setEmailClass","email","mobileClass","setMobileClass","mobile"],"mappings":"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","sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState} from 'react';\nimport _ from \"lodash/fp\";\nimport '../driver.scss';\nimport API from '../../../helpers/api';\n\n\n  function AddDriver(props){\n    const { register, handleSubmit, watch, errors } = useForm({\n        mode: 'onChange'\n    });\n    const history = useHistory();\n    const[drivers, setDrivers]=useState([]);\n\n    const OnSubmit = async (data)  => {\n      const response = await API('drivers', 'POST', data);\n      if(response.id){\n        history.push('/driver-list');\n      }\n    }\n    return(\n        <>\n            <Col lg=\"6\">\n                <Card>\n                    <CardHeader>\n                        <h3 className=\"mb-0\">Add Driver</h3>\n                    </CardHeader>\n                    <CardBody>\n                        <form onSubmit={handleSubmit(OnSubmit)}>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"firstname\"\n                                    >\n                                    First Name\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"firstname\"\n                                        className={errors.firstname?\"is-invalid\":\"is-valid\"}\n                                        placeholder=\"First Name\"\n                                        type=\"text\"                                                \n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"firstname.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"firstname.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Name should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"lastname\"\n                                    >\n                                    Last Name\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"lastname\"\n                                        className={lastNameClass}\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setLastNameClass(errors.lastname?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setLastNameClass(\"is-invalid\")\n                                        }}     \n                                        placeholder=\"Last Name\"\n                                        type=\"text\"\n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"lastname.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"lastname.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Name should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"email\"\n                                    >\n                                    Email\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"email\"\n                                        className={emailClass}\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setEmailClass(errors.email?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setEmailClass(\"is-invalid\")\n                                        }}  \n                                        placeholder=\"Email\"\n                                        type=\"email\"\n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                                      })}\n                                    />\n                                    {_.get(\"email.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"email.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Invalid Email</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"mobile\"\n                                    >\n                                    Mobile\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"mobile\"\n                                        className={mobileClass}\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setMobileClass(errors.mobile?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setMobileClass(\"is-invalid\")\n                                        }} \n                                        placeholder=\"Phone No\"\n                                        type=\"number\"\n                                        innerRef={register({\n                                            required: true,\n                                            pattern: /^(98|97)([0-9]{8}$)/i\n                                        })}\n                                    />\n                                   {_.get(\"mobile.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"mobile.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">10 digit number and starts with 98 or 97</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <Row className=\"float-right\">\n                                <Col>\n                                    <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                                </Col>\n                            </Row>\n                        </form>\n                    </CardBody>\n                </Card>\n            </Col>\n        </>\n    );\n}\n\nexport default AddDriver;"]},"metadata":{},"sourceType":"module"}