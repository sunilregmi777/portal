{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/DriverList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { MDBDataTableV5 } from 'mdbreact';\nimport { Button, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './driver.scss';\nimport { connect } from \"react-redux\";\nimport { fetchDriver, deleteDriver, updateDriver } from '../../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DriverList(props) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const [driver, setDriver] = useState(null);\n\n  const handleDelete = (event, drivers) => {\n    setDriver(drivers.id);\n    setModalShow(true);\n  };\n\n  const handleClose = () => {\n    setModalShow(false);\n  };\n\n  const handleDeleteDriver = (event, id) => {\n    props.deleteDriver(id, props.drivers);\n    setModalShow(false);\n  }; // const handleUpdateLocation = (location) => {\n  //       locations.splice(locations.map(data => data.id).indexOf(location.id), 1, location);\n  //       setLocations(locations);\n  //       props.activateAlert({\n  //           type: alert.SUCCESS,\n  //           message: `${location.address} is successfully updated}!`\n  //       });\n  //   }\n\n\n  const handleEdit = (event, id) => {\n    props.updateDriver(id, props.drivers);\n  };\n\n  const toggle = () => setModalShow(!modalShow); // console.log(props.drivers)\n\n\n  let newList = [];\n\n  if (props.drivers) {\n    newList = props.drivers.map(drivers => {\n      return Object.assign(drivers, {\n        action: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: event => handleEdit(event, driver),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: event => handleDelete(event, drivers),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      });\n    });\n  }\n\n  const newData = {\n    columns: [{\n      label: 'Name',\n      field: 'name',\n      width: 100\n    }, {\n      label: 'Email',\n      field: 'email',\n      width: 100\n    }, {\n      label: 'Address',\n      field: 'address',\n      width: 100\n    }, {\n      label: 'Phone No.',\n      field: 'phone',\n      width: 100\n    }, {\n      label: 'Action',\n      field: 'action',\n      width: 200\n    }],\n    rows: newList\n  };\n  useEffect(() => {\n    props.fetchDriver();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"driver-list\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"driver list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBDataTableV5, {\n          hover: true,\n          entriesOptions: [5, 20, 25],\n          entries: 20,\n          pagesAmount: 4,\n          data: newData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: modalShow,\n          toggle: toggle,\n          className: \"d\",\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            toggle: toggle,\n            children: \"Delete Driver\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: \"Are you sure to delete driver?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-danger\",\n              onClick: event => handleDeleteDriver(event, driver),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 11\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-info\",\n              onClick: toggle,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(DriverList, \"tF3etU0xbD4plMLP38W9DlkqfpY=\");\n\n_c = DriverList;\n\nconst mapStateToProps = state => {\n  return {\n    drivers: state.driver.drivers\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchDriver,\n  deleteDriver\n})(DriverList);\n\nvar _c;\n\n$RefreshReg$(_c, \"DriverList\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/DriverList.js"],"names":["React","useState","useEffect","MDBDataTableV5","Button","Container","Modal","ModalHeader","ModalBody","ModalFooter","Link","connect","fetchDriver","deleteDriver","updateDriver","DriverList","props","data","setData","modalShow","setModalShow","driver","setDriver","handleDelete","event","drivers","id","handleClose","handleDeleteDriver","handleEdit","toggle","newList","map","Object","assign","action","newData","columns","label","field","width","rows","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { MDBDataTableV5 } from 'mdbreact';\nimport { Button, Container, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './driver.scss';\nimport { connect } from \"react-redux\";\nimport { fetchDriver, deleteDriver, updateDriver } from '../../store/actions';\n\nfunction DriverList(props) {\n  const [data, setData] = useState([])\n  const [modalShow, setModalShow] = useState(false)\n  const [driver, setDriver] = useState(null)\n\n  const handleDelete =  (event, drivers) => {\n      setDriver(drivers.id);\n      setModalShow(true);\n  }\n  const handleClose = () => {\n    setModalShow(false);\n  }\n  const handleDeleteDriver = (event, id) =>{\n      props.deleteDriver(id, props.drivers)\n      setModalShow(false);\n  }\n\n  // const handleUpdateLocation = (location) => {\n  //       locations.splice(locations.map(data => data.id).indexOf(location.id), 1, location);\n  //       setLocations(locations);\n  //       props.activateAlert({\n  //           type: alert.SUCCESS,\n  //           message: `${location.address} is successfully updated}!`\n  //       });\n  //   }\n  const handleEdit = (event, id) =>{\n    props.updateDriver(id, props.drivers)\n  }\n  const toggle = () => setModalShow(!modalShow);\n  // console.log(props.drivers)\n  let newList = [];\n  if (props.drivers){\n       newList = props.drivers.map(drivers => {\n        return Object.assign(drivers, {\n            action: \n            <>\n              <button className=\"btn btn-primary\" onClick={(event) => handleEdit(event, driver)}>Edit</button>\n              <button className=\"btn btn-danger\"  onClick={(event) => handleDelete(event, drivers)}>Delete</button>\n            </>\n        });\n    });\n  }\n\n  const newData={\n    columns: [\n      {\n        label: 'Name',\n        field: 'name',\n        width: 100,\n      },\n      {\n        label: 'Email',\n        field: 'email',\n        width: 100,\n      },\n      {\n        label: 'Address',\n        field: 'address',\n        width: 100,\n      },\n      {\n        label: 'Phone No.',\n        field: 'phone',\n        width: 100,\n      },\n      {\n        label: 'Action',\n        field: 'action',\n        width: 200,\n      },\n    ],\n    rows: newList\n  };\n\n  useEffect(() => {\n      props.fetchDriver();\n  },[]);\n\n    return(\n    <>\n      <div className=\"driver-list\">\n        <Container fluid>\n          <h1>driver list</h1>\n          <MDBDataTableV5 hover entriesOptions={[5, 20, 25]} entries={20} pagesAmount={4} data={newData} />\n          <Modal isOpen={modalShow} toggle={toggle} className=\"d\">\n        <ModalHeader toggle={toggle}>Delete Driver</ModalHeader>\n        <ModalBody>\n          Are you sure to delete driver?\n        </ModalBody>\n        <ModalFooter>\n          <Button className=\"btn-danger\" onClick={(event) => handleDeleteDriver(event, driver)}>Delete</Button>{' '}\n          <Button className=\"btn-info\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n      </Modal>\n        </Container>\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    drivers: state.driver.drivers,\n  };\n};\nexport default connect(mapStateToProps, { fetchDriver,deleteDriver })(DriverList);"]},"metadata":{},"sourceType":"module"}