{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/AddDriver.js\",\n    _s = $RefreshSig$();\n\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardBody, CardTitle, Container, Row, Col, FormGroup, Input } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect } from 'react';\nimport _ from \"lodash/fp\";\nimport './driver.scss';\nimport { connect } from \"react-redux\";\nimport { addDriver } from '../../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddDriver(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const history = useHistory();\n\n  const onSubmit = data => {\n    props.addDriver(data, history);\n  };\n\n  useEffect(() => {\n    props.addDriver();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-driver\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add Drier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(CardBody, {\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit(onSubmit),\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  md: \"4\",\n                  children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-control-label\",\n                      htmlFor: \"firstname\",\n                      children: \"Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 46,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      id: \"name\",\n                      name: \"name\",\n                      placeholder: \"Name\",\n                      type: \"text\",\n                      innerRef: register({\n                        required: true,\n                        pattern: /^[A-Za-z]+$/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 45\n                    }, this), _.get(\"name.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 63,\n                      columnNumber: 49\n                    }, this), _.get(\"name.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"Name should be letters only\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 66,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 45,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: \"4\",\n                  children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-control-label\",\n                      htmlFor: \"email\",\n                      children: \"Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      name: \"email\",\n                      placeholder: \"Email\",\n                      type: \"email\",\n                      innerRef: register({\n                        required: true,\n                        pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 45\n                    }, this), _.get(\"email.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 49\n                    }, this), _.get(\"email.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"Invalid Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 91,\n                      columnNumber: 48\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  md: \"4\",\n                  children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-control-label\",\n                      htmlFor: \"lastname\",\n                      children: \"Address\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 97,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      name: \"address\",\n                      placeholder: \"Address\",\n                      type: \"text\",\n                      innerRef: register({\n                        required: true\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 45\n                    }, this), _.get(\"address.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 112,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  md: \"4\",\n                  children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"form-control-label\",\n                      htmlFor: \"lastname\",\n                      children: \"Phone\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Input, {\n                      name: \"phone\",\n                      placeholder: \"Phone No\",\n                      type: \"number\",\n                      innerRef: register({\n                        required: true\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 127,\n                      columnNumber: 45\n                    }, this), _.get(\"phone.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"error-message\",\n                      children: \"This field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    className: \"btn-info\",\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddDriver, \"d0DaRtGLTwE+NTRPmi435t3KVqE=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = AddDriver;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.login.loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addDriver\n})(AddDriver);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDriver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/AddDriver.js"],"names":["Breadcrumb","BreadcrumbItem","Button","Card","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","useForm","useHistory","React","useEffect","_","connect","addDriver","AddDriver","props","register","handleSubmit","watch","errors","history","onSubmit","data","required","pattern","get","mapStateToProps","state","loading","login"],"mappings":"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","sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect} from 'react';\nimport _ from \"lodash/fp\";\nimport './driver.scss';\nimport { connect } from \"react-redux\";\nimport { addDriver } from '../../store/actions';\n\n\n  function AddDriver(props){\n    const { register, handleSubmit, watch, errors } = useForm();\n    const history = useHistory();\n\n    const onSubmit =  data  => {\n      props.addDriver(data, history)\n    }\n\n    useEffect(() => {\n      props.addDriver();\n    },[]);\n\n    return(\n        <>\n            <div className=\"add-driver\">\n                <Container fluid>\n                    <h1>Add Drier</h1>\n                    <Card className=\"mb-4\">\n                        <CardBody>\n                            <form onSubmit={handleSubmit(onSubmit)}>\n                                <Row>\n                                    <Col md=\"4\">\n                                        <FormGroup>\n                                            <label\n                                              className=\"form-control-label\"\n                                              htmlFor=\"firstname\"\n                                            >\n                                            Name\n                                            </label>\n                                            <Input\n                                              id=\"name\"\n                                              name=\"name\"\n                                              placeholder=\"Name\"\n                                              type=\"text\"\n                                              innerRef={register({\n                                                  required: true,\n                                                  pattern: /^[A-Za-z]+$/i \n                                                })}\n                                            />\n                                            {_.get(\"name.type\", errors) === \"required\" && (\n                                                <p className=\"error-message\">This field is required</p>\n                                            )}\n                                            {_.get(\"name.type\", errors) === \"pattern\" && (\n                                                <p className=\"error-message\">Name should be letters only</p>\n                                            )}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <FormGroup>\n                                            <label\n                                              className=\"form-control-label\"\n                                              htmlFor=\"email\"\n                                            >\n                                            Email\n                                            </label>\n                                            <Input\n                                              name=\"email\"\n                                              placeholder=\"Email\"\n                                              type=\"email\"\n                                              innerRef={register({\n                                              required: true,\n                                              pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                                            })}\n                                            />\n                                            {_.get(\"email.type\", errors) === \"required\" && (\n                                                <p className=\"error-message\">This field is required</p>\n                                            )}\n                                            {_.get(\"email.type\", errors) === \"pattern\" && (\n                                               <p className=\"error-message\">Invalid Email</p>\n                                            )}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <FormGroup>\n                                            <label\n                                              className=\"form-control-label\"\n                                              htmlFor=\"lastname\"\n                                            >\n                                            Address\n                                            </label>\n                                            <Input\n                                              name=\"address\"\n                                              placeholder=\"Address\"\n                                              type=\"text\"\n                                              innerRef={register({\n                                                  required: true,\n                                                })}\n                                            />\n                                             {_.get(\"address.type\", errors) === \"required\" && (\n                                                <p className=\"error-message\">This field is required</p>\n                                            )}\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                   \n                                    <Col md=\"4\">\n                                        <FormGroup>\n                                            <label\n                                              className=\"form-control-label\"\n                                              htmlFor=\"lastname\"\n                                            >\n                                            Phone\n                                            </label>\n                                            <Input\n                                              name=\"phone\"\n                                              placeholder=\"Phone No\"\n                                              type=\"number\"\n                                              innerRef={register({\n                                                  required: true,\n                                                })}\n                                            />\n                                             {_.get(\"phone.type\", errors) === \"required\" && (\n                                                <p className=\"error-message\">This field is required</p>\n                                            )}\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col>\n                                        <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                                    </Col>\n                                </Row>\n                            </form>\n                        </CardBody>\n                      </Card>\n                </Container>\n            </div>\n        </>\n    );\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.login.loading,\n  };\n};\n\nexport default connect(mapStateToProps, { addDriver })(AddDriver);"]},"metadata":{},"sourceType":"module"}