{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/AddDriver.js\",\n    _s2 = $RefreshSig$();\n\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardHeader, CardBody, CardTitle, Container, Row, Col, FormGroup, Input, Label } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from 'react';\nimport _ from \"lodash/fp\";\nimport './driver.scss';\nimport { connect } from \"react-redux\"; // import classnames from 'classnames';\n// import { addDriver } from '../../store/actions';\n\nimport API from '../../helpers/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddDriver(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm({\n    mode: 'onChange'\n  });\n  const history = useHistory();\n  const [drivers, setDrivers] = useState([]);\n  const [firstNameClass, setFirstNameClass] = useState('');\n  const [lastNameClass, setLastNameClass] = useState('');\n  const [emailClass, setEmailClass] = useState('');\n  const [mobileClass, setMobileClass] = useState('');\n\n  const OnSubmit = async data => {\n    _s();\n\n    const response = await API('drivers', 'POST', data);\n    const history = useHistory();\n\n    if (response.id) {\n      history.push('/driver-list');\n    }\n  };\n\n  _s(OnSubmit, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n    return [useHistory];\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-driver\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mt--5\",\n        fluid: true,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            lg: \"6\",\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"mb-0\",\n                  children: \"Add Driver\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n                children: /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: handleSubmit(OnSubmit),\n                  children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"row\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      md: \"3\",\n                      children: /*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-control-label col-form-label\",\n                        htmlFor: \"firstname\",\n                        children: \"First Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 60,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 59,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      md: \"9\",\n                      children: [/*#__PURE__*/_jsxDEV(Input, {\n                        name: \"firstname\",\n                        className: firstNameClass,\n                        placeholder: \"First Name\",\n                        type: \"text\",\n                        onChange: e => {\n                          if (e.target.value.length > 0) {\n                            setFirstNameClass(errors.firstname ? \"is-invalid\" : \"is-valid\");\n                          } else setFirstNameClass(\"is-invalid\");\n                        },\n                        innerRef: register({\n                          required: true,\n                          pattern: /^[A-Za-z]+[A-Za-z]/i\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 68,\n                        columnNumber: 49\n                      }, this), _.get(\"firstname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"This field is required\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 85,\n                        columnNumber: 53\n                      }, this), _.get(\"firstname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"Name should be letters only\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 88,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"row\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      md: \"3\",\n                      children: /*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-control-label col-form-label\",\n                        htmlFor: \"lastname\",\n                        children: \"Last Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 94,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      md: \"9\",\n                      children: [/*#__PURE__*/_jsxDEV(Input, {\n                        name: \"lastname\",\n                        className: lastNameClass,\n                        onChange: e => {\n                          if (e.target.value.length > 0) {\n                            setLastNameClass(errors.lastname ? \"is-invalid\" : \"is-valid\");\n                          } else setLastNameClass(\"is-invalid\");\n                        },\n                        placeholder: \"Last Name\",\n                        type: \"text\",\n                        innerRef: register({\n                          required: true,\n                          pattern: /^[A-Za-z]+[A-Za-z]/i\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 102,\n                        columnNumber: 49\n                      }, this), _.get(\"lastname.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"This field is required\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 119,\n                        columnNumber: 53\n                      }, this), _.get(\"lastname.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"Name should be letters only\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 122,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 101,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"row\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      md: \"3\",\n                      children: /*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-control-label col-form-label\",\n                        htmlFor: \"email\",\n                        children: \"Email\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 128,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 127,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      md: \"9\",\n                      children: [/*#__PURE__*/_jsxDEV(Input, {\n                        name: \"email\",\n                        className: emailClass,\n                        onChange: e => {\n                          if (e.target.value.length > 0) {\n                            setEmailClass(errors.email ? \"is-invalid\" : \"is-valid\");\n                          } else setEmailClass(\"is-invalid\");\n                        },\n                        placeholder: \"Email\",\n                        type: \"email\",\n                        innerRef: register({\n                          required: true,\n                          pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 136,\n                        columnNumber: 49\n                      }, this), _.get(\"email.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"This field is required\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 153,\n                        columnNumber: 53\n                      }, this), _.get(\"email.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"Invalid Email\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 156,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                    className: \"row\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      md: \"3\",\n                      children: /*#__PURE__*/_jsxDEV(Label, {\n                        className: \"form-control-label col-form-label\",\n                        htmlFor: \"mobile\",\n                        children: \"Mobile\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 162,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      md: \"9\",\n                      children: [/*#__PURE__*/_jsxDEV(Input, {\n                        name: \"mobile\",\n                        className: mobileClass,\n                        onChange: e => {\n                          if (e.target.value.length > 0) {\n                            setMobileClass(errors.mobile ? \"is-invalid\" : \"is-valid\");\n                          } else setMobileClass(\"is-invalid\");\n                        },\n                        placeholder: \"Phone No\",\n                        type: \"number\",\n                        innerRef: register({\n                          required: true,\n                          pattern: /^(98|97)([0-9]{8}$)/i\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 49\n                      }, this), _.get(\"mobile.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"This field is required\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 187,\n                        columnNumber: 53\n                      }, this), _.get(\"mobile.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"error-message\",\n                        children: \"10 digit number and starts with 98 or 97\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    className: \"float-right\",\n                    children: /*#__PURE__*/_jsxDEV(Col, {\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        type: \"submit\",\n                        className: \"btn-info\",\n                        children: \"Submit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 196,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 195,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s2(AddDriver, \"t5K4SddrmRo9jnfCsxfaxWhxQa8=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = AddDriver;\nexport default AddDriver;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDriver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/AddDriver.js"],"names":["Breadcrumb","BreadcrumbItem","Button","Card","CardHeader","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","Label","useForm","useHistory","React","useEffect","useState","_","connect","API","AddDriver","props","register","handleSubmit","watch","errors","mode","history","drivers","setDrivers","firstNameClass","setFirstNameClass","lastNameClass","setLastNameClass","emailClass","setEmailClass","mobileClass","setMobileClass","OnSubmit","data","response","id","push","e","target","value","length","firstname","required","pattern","get","lastname","email","mobile"],"mappings":"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","sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState} from 'react';\nimport _ from \"lodash/fp\";\nimport './driver.scss';\nimport { connect } from \"react-redux\";\n// import classnames from 'classnames';\n// import { addDriver } from '../../store/actions';\nimport API from '../../helpers/api';\n\n\n  function AddDriver(props){\n    const { register, handleSubmit, watch, errors } = useForm({\n        mode: 'onChange'\n    });\n    const history = useHistory();\n    const[drivers, setDrivers]=useState([]);\n    const[firstNameClass, setFirstNameClass] = useState('');\n    const[lastNameClass, setLastNameClass] = useState('');\n    const[emailClass, setEmailClass] = useState('');\n    const[mobileClass, setMobileClass] = useState('');\n\n    const OnSubmit = async (data)  => {\n      const response = await API('drivers', 'POST', data);\n    const history= useHistory();\n      if(response.id){\n        history.push('/driver-list');\n      }\n    }\n\n    return(\n        <>\n            <div className=\"add-driver\">\n                <Container className=\"mt--5\" fluid>\n                    <Row>\n                        <Col lg=\"6\">\n                            <Card>\n                                <CardHeader>\n                                    <h3 className=\"mb-0\">Add Driver</h3>\n                                </CardHeader>\n                                <CardBody>\n                                    <form onSubmit={handleSubmit(OnSubmit)}>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"firstname\"\n                                                >\n                                                First Name\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"firstname\"\n                                                    className={firstNameClass}\n                                                    placeholder=\"First Name\"\n                                                    type=\"text\"\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setFirstNameClass(errors.firstname?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setFirstNameClass(\"is-invalid\")\n                                                    }}                                                \n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Za-z]+[A-Za-z]/i \n                                                    })}\n                                                />\n                                                {_.get(\"firstname.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"firstname.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Name should be letters only</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"lastname\"\n                                                >\n                                                Last Name\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"lastname\"\n                                                    className={lastNameClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setLastNameClass(errors.lastname?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setLastNameClass(\"is-invalid\")\n                                                    }}     \n                                                    placeholder=\"Last Name\"\n                                                    type=\"text\"\n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Za-z]+[A-Za-z]/i \n                                                    })}\n                                                />\n                                                {_.get(\"lastname.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"lastname.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Name should be letters only</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"email\"\n                                                >\n                                                Email\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"email\"\n                                                    className={emailClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setEmailClass(errors.email?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setEmailClass(\"is-invalid\")\n                                                    }}  \n                                                    placeholder=\"Email\"\n                                                    type=\"email\"\n                                                    innerRef={register({\n                                                    required: true,\n                                                    pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                                                  })}\n                                                />\n                                                {_.get(\"email.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"email.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">Invalid Email</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <FormGroup className=\"row\">\n                                            <Col md=\"3\">\n                                                <Label\n                                                    className=\"form-control-label col-form-label\"\n                                                    htmlFor=\"mobile\"\n                                                >\n                                                Mobile\n                                                </Label>\n                                            </Col>\n                                            <Col md=\"9\">\n                                                <Input\n                                                    name=\"mobile\"\n                                                    className={mobileClass}\n                                                    onChange = {(e)=>{\n                                                        if(e.target.value.length > 0){\n                                                            setMobileClass(errors.mobile?\"is-invalid\":\"is-valid\")\n                                                        }\n                                                        else setMobileClass(\"is-invalid\")\n                                                    }} \n                                                    placeholder=\"Phone No\"\n                                                    type=\"number\"\n                                                    innerRef={register({\n                                                        required: true,\n                                                        pattern: /^(98|97)([0-9]{8}$)/i\n                                                    })}\n                                                />\n                                               {_.get(\"mobile.type\", errors) === \"required\" && (\n                                                    <p className=\"error-message\">This field is required</p>\n                                                )}\n                                                {_.get(\"mobile.type\", errors) === \"pattern\" && (\n                                                    <p className=\"error-message\">10 digit number and starts with 98 or 97</p>\n                                                )}\n                                            </Col>\n                                        </FormGroup>\n                                        <Row className=\"float-right\">\n                                            <Col>\n                                                <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                                            </Col>\n                                        </Row>\n                                    </form>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n}\n\nexport default AddDriver;"]},"metadata":{},"sourceType":"module"}