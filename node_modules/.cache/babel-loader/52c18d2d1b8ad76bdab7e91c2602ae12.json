{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { loginError, loginSuccessful, logoutSuccessful } from './actions';\nimport { LOGIN } from './actionTypes';\nimport loginData from '../../../assets/login-info.json';\nimport token from '../../../token';\n\nfunction* login({\n  payload: {\n    email,\n    password,\n    history\n  }\n}) {\n  try {\n    //const response = yield call();\n    if (email === loginData.email && password === loginData.password) {\n      localStorage.setItem(\"token\", token);\n      yield put(loginSuccessful());\n      history.push(\"/dashboard\");\n    } else {\n      loginError(\"Invalid email or password\");\n    }\n  } catch (error) {\n    yield put(loginError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(LOGIN, login);\n}\nexport function* loginSaga() {\n  yield all([fork(watchUserLogin)]);\n}\n\nfunction* logout({\n  payload: {\n    history\n  }\n}) {\n  //const response = yield call();\n  localStorage.clear();\n  yield put(logoutSuccessful());\n  history.push(\"/dashboard\");\n}\n\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT, logout);\n}\nexport function* logoutSaga() {\n  yield all([fork(watchUserLogout)]);\n}","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/auth/login/saga.js"],"names":["fork","put","all","call","takeEvery","loginError","loginSuccessful","logoutSuccessful","LOGIN","loginData","token","login","payload","email","password","history","localStorage","setItem","push","error","watchUserLogin","loginSaga","logout","clear","watchUserLogout","LOGOUT","logoutSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,UAAT,EAAqBC,eAArB,EAAsCC,gBAAtC,QAA8D,WAA9D;AAEA,SAASC,KAAT,QAAsB,eAAtB;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,UAAUC,KAAV,CAAgB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB;AAAX,CAAhB,EAA2D;AACvD,MAAI;AACA;AACA,QAAIF,KAAK,KAAKJ,SAAS,CAACI,KAApB,IAA6BC,QAAQ,KAAKL,SAAS,CAACK,QAAxD,EAAkE;AAC9DE,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BP,KAA9B;AACA,YAAMT,GAAG,CAACK,eAAe,EAAhB,CAAT;AACAS,MAAAA,OAAO,CAACG,IAAR,CAAa,YAAb;AACH,KAJD,MAIO;AACHb,MAAAA,UAAU,CAAC,2BAAD,CAAV;AACH;AACJ,GATD,CAUA,OAAOc,KAAP,EAAc;AACV,UAAMlB,GAAG,CAACI,UAAU,CAACc,KAAD,CAAX,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMhB,SAAS,CAACI,KAAD,EAAQG,KAAR,CAAf;AACH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMnB,GAAG,CAAC,CAACF,IAAI,CAACoB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,UAAUE,MAAV,CAAiB;AAAEV,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAAX,CAAjB,EAA2C;AACvC;AACAC,EAAAA,YAAY,CAACO,KAAb;AACA,QAAMtB,GAAG,CAACM,gBAAgB,EAAjB,CAAT;AACAQ,EAAAA,OAAO,CAACG,IAAR,CAAa,YAAb;AACH;;AAED,OAAO,UAAUM,eAAV,GAA4B;AAC/B,QAAMpB,SAAS,CAACqB,MAAD,EAASH,MAAT,CAAf;AACH;AAED,OAAO,UAAUI,UAAV,GAAuB;AAC1B,QAAMxB,GAAG,CAAC,CAACF,IAAI,CAACwB,eAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { loginError, loginSuccessful, logoutSuccessful } from './actions';\n\nimport { LOGIN } from './actionTypes'\n\nimport loginData from '../../../assets/login-info.json'\nimport token from '../../../token'\n\nfunction* login({ payload: { email, password, history } }) {\n    try {\n        //const response = yield call();\n        if (email === loginData.email && password === loginData.password) {\n            localStorage.setItem(\"token\", token);\n            yield put(loginSuccessful());\n            history.push(\"/dashboard\");\n        } else {\n            loginError(\"Invalid email or password\");\n        }\n    }\n    catch (error) {\n        yield put(loginError(error));\n    }\n}\n\nexport function* watchUserLogin() {\n    yield takeEvery(LOGIN, login);\n}\n\nexport function* loginSaga() {\n    yield all([fork(watchUserLogin)]);\n}\n\nfunction* logout({ payload: { history } }) {\n    //const response = yield call();\n    localStorage.clear();\n    yield put(logoutSuccessful());\n    history.push(\"/dashboard\");\n}\n\nexport function* watchUserLogout() {\n    yield takeEvery(LOGOUT, logout);\n}\n\nexport function* logoutSaga() {\n    yield all([fork(watchUserLogout)]);\n}"]},"metadata":{},"sourceType":"module"}