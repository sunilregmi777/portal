{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { addDriverSuccessful, fetchDriverSuccessful, fetchDriverFailed, addDriverFailed, deleteDriverSuccessful, deleteDriverFailed, updateDriverSuccessful, updateDriverFailed } from './actions';\nimport { ADD_DRIVER, FETCH_DRIVER, DELETE_DRIVER, DELETE_DRIVER_SUCCESSFUL, UPDATE_DRIVER, UPDATE_DRIVER_SUCCESSFUL } from './actionTypes';\nimport API from '../../helpers/api';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\nfunction* addDriver({\n  payload\n}) {\n  try {\n    const data = yield call(API, \"drivers\", \"post\", payload.data); // yield put(addDriverSuccessful(data));\n\n    payload.history.push('/driver-list');\n  } catch (error) {\n    yield put(addDriverFailed(error));\n  }\n}\n\nexport function* watchAddDriver() {\n  yield takeEvery(ADD_DRIVER, addDriver);\n}\nexport function* addDriverSaga() {\n  yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n  try {\n    const data = yield call(API, \"drivers\", \"get\");\n    yield put(fetchDriverSuccessful(data));\n  } catch (error) {\n    console.log(error);\n    yield put(fetchDriverFailed(error));\n  }\n}\n\nexport function* watchFetchDriver() {\n  yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\nexport function* fetchDriverSaga() {\n  yield all([fork(watchFetchDriver)]);\n}\n\nfunction* deleteDriver({\n  type,\n  payload\n}) {\n  try {\n    yield call(API, `drivers/${payload.id}`, \"delete\");\n    yield put(deleteDriverSuccessful(payload.id, payload.drivers));\n  } catch (error) {\n    yield put(deleteDriverFailed(error));\n  }\n}\n\nexport function* watchDeleteDriver() {\n  yield takeEvery(DELETE_DRIVER, deleteDriver);\n}\nexport function* deleteDriverSaga() {\n  yield all([fork(watchDeleteDriver)]);\n}\n\nfunction* updateDriver({\n  type,\n  payload\n}) {\n  try {// yield call(API, `drivers/${payload.id}`, \"delete\");\n    // yield put(updateDriverSuccessful(payload.id, payload.drivers))\n  } catch (error) {\n    yield put(updateDriverFailed(error));\n  }\n}\n\nexport function* watchUpdateDriver() {\n  yield takeEvery(UPDATE_DRIVER, updateDriver);\n}\nexport function* updateDriverSaga() {\n  yield all([fork(watchUpdateDriver)]);\n}","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/driver/saga.js"],"names":["fork","put","all","call","takeEvery","addDriverSuccessful","fetchDriverSuccessful","fetchDriverFailed","addDriverFailed","deleteDriverSuccessful","deleteDriverFailed","updateDriverSuccessful","updateDriverFailed","ADD_DRIVER","FETCH_DRIVER","DELETE_DRIVER","DELETE_DRIVER_SUCCESSFUL","UPDATE_DRIVER","UPDATE_DRIVER_SUCCESSFUL","API","axios","useHistory","addDriver","payload","data","history","push","error","watchAddDriver","addDriverSaga","fetchDriver","console","log","watchFetchDriver","fetchDriverSaga","deleteDriver","type","id","drivers","watchDeleteDriver","deleteDriverSaga","updateDriver","watchUpdateDriver","updateDriverSaga"],"mappings":"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","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { addDriverSuccessful, fetchDriverSuccessful ,fetchDriverFailed, addDriverFailed, deleteDriverSuccessful,\n deleteDriverFailed, updateDriverSuccessful, updateDriverFailed} from './actions';\n\nimport { ADD_DRIVER, FETCH_DRIVER, DELETE_DRIVER, DELETE_DRIVER_SUCCESSFUL,UPDATE_DRIVER, UPDATE_DRIVER_SUCCESSFUL  } from './actionTypes';\nimport API from '../../helpers/api';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction* addDriver( {payload} ) {\n    try {\n        const data = yield call(API, \"drivers\", \"post\", payload.data);\n            // yield put(addDriverSuccessful(data));\n            payload.history.push('/driver-list');\n        }\n    catch (error) {\n        yield put(addDriverFailed(error));\n    }\n}\n\nexport function* watchAddDriver() {\n    yield takeEvery(ADD_DRIVER, addDriver);\n}\n\nexport function* addDriverSaga() {\n    yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n    try {\n        const data = yield call(API, \"drivers\", \"get\");\n            yield put(fetchDriverSuccessful(data));\n    }\n    catch (error) {\n        console.log(error)\n        yield put(fetchDriverFailed(error));\n    }\n}\n\nexport function* watchFetchDriver() {\n    yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\n\n\nexport function* fetchDriverSaga() {\n    yield all([fork(watchFetchDriver)]);\n}\n\nfunction* deleteDriver({type, payload}) {\n    try {\n        yield call(API, `drivers/${payload.id}`, \"delete\");\n        yield put(deleteDriverSuccessful(payload.id, payload.drivers))\n        }\n    catch (error) {\n        yield put(deleteDriverFailed(error));\n    }\n}\n\nexport function* watchDeleteDriver() {\n    yield takeEvery(DELETE_DRIVER, deleteDriver);\n}\n\nexport function* deleteDriverSaga() {\n    yield all([fork(watchDeleteDriver)]);\n}\n\nfunction* updateDriver({type, payload}) {\n    try {\n        // yield call(API, `drivers/${payload.id}`, \"delete\");\n        // yield put(updateDriverSuccessful(payload.id, payload.drivers))\n        }\n    catch (error) {\n        yield put(updateDriverFailed(error));\n    }\n}\n\nexport function* watchUpdateDriver() {\n    yield takeEvery(UPDATE_DRIVER, updateDriver);\n}\n\nexport function* updateDriverSaga() {\n    yield all([fork(watchUpdateDriver)]);\n}\n"]},"metadata":{},"sourceType":"module"}