{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { loginError, loginSuccessful } from './actions';\nimport { LOGIN } from './actionTypes';\nimport loginData from '../../../assets/login-info.json';\n\nfunction* login({\n  payload: {\n    email,\n    password,\n    history\n  }\n}) {\n  try {\n    //const response = yield call();\n    if (email === loginData.email && password === loginData.password) {\n      yield put(loginSuccessful());\n      history.push(\"/dashboard\");\n    } else {\n      loginError(\"Invalid email or password\");\n    }\n  } catch (error) {\n    yield put(loginError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(LOGIN, login);\n}\n\nfunction* loginSaga() {\n  yield all([fork(watchUserLogin)]);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/auth/login/saga.js"],"names":["fork","put","all","call","takeEvery","loginError","loginSuccessful","LOGIN","loginData","login","payload","email","password","history","push","error","watchUserLogin","loginSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,WAA5C;AAEA,SAASC,KAAT,QAAsB,eAAtB;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;;AAEA,UAAUC,KAAV,CAAgB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB;AAAX,CAAhB,EAA2D;AACvD,MAAI;AACA;AACA,QAAIF,KAAK,KAAKH,SAAS,CAACG,KAApB,IAA6BC,QAAQ,KAAKJ,SAAS,CAACI,QAAxD,EAAkE;AAC9D,YAAMX,GAAG,CAACK,eAAe,EAAhB,CAAT;AACAO,MAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACH,KAHD,MAGO;AACHT,MAAAA,UAAU,CAAC,2BAAD,CAAV;AACH;AACJ,GARD,CASA,OAAOU,KAAP,EAAc;AACV,UAAMd,GAAG,CAACI,UAAU,CAACU,KAAD,CAAX,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMZ,SAAS,CAACG,KAAD,EAAQE,KAAR,CAAf;AACH;;AAED,UAAUQ,SAAV,GAAsB;AAClB,QAAMf,GAAG,CAAC,CAACF,IAAI,CAACgB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,eAAeC,SAAf","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { loginError, loginSuccessful } from './actions';\n\nimport { LOGIN } from './actionTypes'\n\nimport loginData from '../../../assets/login-info.json'\n\nfunction* login({ payload: { email, password, history } }) {\n    try {\n        //const response = yield call();\n        if (email === loginData.email && password === loginData.password) {\n            yield put(loginSuccessful());\n            history.push(\"/dashboard\");\n        } else {\n            loginError(\"Invalid email or password\");\n        }\n    }\n    catch (error) {\n        yield put(loginError(error));\n    }\n}\n\nexport function* watchUserLogin() {\n    yield takeEvery(LOGIN, login);\n}\n\nfunction* loginSaga() {\n    yield all([fork(watchUserLogin)]);\n}\n\nexport default loginSaga;\n"]},"metadata":{},"sourceType":"module"}