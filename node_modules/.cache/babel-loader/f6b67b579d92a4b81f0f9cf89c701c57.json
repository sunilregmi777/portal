{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { addDriverSucessful } from './actions';\nimport { ADD_DRIVER } from './actionTypes';\nimport { baseUrl } from '../../../helpers/api';\nimport axios from 'axios';\nimport API from '../../../helpers/api';\n\nfunction* addDriver({\n  payload\n}) {\n  try {\n    const response = yield call(axios.post(`${baseUrl}/drivers`, payload));\n    yield put(addDriverSucessful());\n    history.push(\"/driver-list\");\n  } catch (error) {\n    yield put(loginError(error));\n  }\n}\n\nexport function* watchAddDriver() {\n  yield takeEvery(ADD_DRIVER, addDriver);\n}\nexport function* addDriverSaga() {\n  yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n  try {\n    const response = yield call(axios.get(`${baseUrl}/drivers`));\n\n    if (response.status >= 200 && response.status <= 299) {\n      yield put(fetchDriverSuccessful(response.data));\n    }\n  } catch (error) {\n    yield put(loginError(error));\n  }\n}\n\nexport function* watchFetchDriver() {\n  yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\nexport function* fetchDriverSaga() {\n  yield all([fork(watchFetchDriver)]);\n}","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/driver/saga.js"],"names":["fork","put","all","call","takeEvery","addDriverSucessful","ADD_DRIVER","baseUrl","axios","API","addDriver","payload","response","post","history","push","error","loginError","watchAddDriver","addDriverSaga","fetchDriver","get","status","fetchDriverSuccessful","data","watchFetchDriver","FETCH_DRIVER","fetchDriverSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAC7B,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,IAAI,CAACK,KAAK,CAACK,IAAN,CAAY,GAAEN,OAAQ,UAAtB,EAAiCI,OAAjC,CAAD,CAA3B;AACI,UAAMV,GAAG,CAACI,kBAAkB,EAAnB,CAAT;AACAS,IAAAA,OAAO,CAACC,IAAR,CAAa,cAAb;AACH,GAJL,CAKA,OAAOC,KAAP,EAAc;AACV,UAAMf,GAAG,CAACgB,UAAU,CAACD,KAAD,CAAX,CAAT;AACH;AACJ;;AAED,OAAO,UAAUE,cAAV,GAA2B;AAC9B,QAAMd,SAAS,CAACE,UAAD,EAAaI,SAAb,CAAf;AACH;AAED,OAAO,UAAUS,aAAV,GAA0B;AAC7B,QAAMjB,GAAG,CAAC,CAACF,IAAI,CAACkB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,UAAUE,WAAV,GAAwB;AACpB,MAAI;AACA,UAAMR,QAAQ,GAAG,MAAMT,IAAI,CAACK,KAAK,CAACa,GAAN,CAAW,GAAEd,OAAQ,UAArB,CAAD,CAA3B;;AACA,QAAGK,QAAQ,CAACU,MAAT,IAAmB,GAAnB,IAA0BV,QAAQ,CAACU,MAAT,IAAkB,GAA/C,EAAmD;AAC/C,YAAMrB,GAAG,CAACsB,qBAAqB,CAACX,QAAQ,CAACY,IAAV,CAAtB,CAAT;AACH;AACJ,GALD,CAMA,OAAOR,KAAP,EAAc;AACV,UAAMf,GAAG,CAACgB,UAAU,CAACD,KAAD,CAAX,CAAT;AACH;AACJ;;AAED,OAAO,UAAUS,gBAAV,GAA6B;AAChC,QAAMrB,SAAS,CAACsB,YAAD,EAAeN,WAAf,CAAf;AACH;AAED,OAAO,UAAUO,eAAV,GAA4B;AAC/B,QAAMzB,GAAG,CAAC,CAACF,IAAI,CAACyB,gBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { addDriverSucessful } from './actions';\n\nimport { ADD_DRIVER } from './actionTypes';\nimport {baseUrl} from '../../../helpers/api';\nimport axios from 'axios';\n\nimport API from '../../../helpers/api';\n\nfunction* addDriver({ payload }) {\n    try {\n        const response = yield call(axios.post(`${baseUrl}/drivers`, payload ));\n            yield put(addDriverSucessful());\n            history.push(\"/driver-list\");\n        }\n    catch (error) {\n        yield put(loginError(error));\n    }\n}\n\nexport function* watchAddDriver() {\n    yield takeEvery(ADD_DRIVER, addDriver);\n}\n\nexport function* addDriverSaga() {\n    yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n    try {\n        const response = yield call(axios.get(`${baseUrl}/drivers` ));\n        if(response.status >= 200 && response.status <=299){\n            yield put(fetchDriverSuccessful(response.data));\n        }\n    }\n    catch (error) {\n        yield put(loginError(error));\n    }\n}\n\nexport function* watchFetchDriver() {\n    yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\n\nexport function* fetchDriverSaga() {\n    yield all([fork(watchFetchDriver)]);\n}\n"]},"metadata":{},"sourceType":"module"}