{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/Driver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport AddDriver from './AddDriver';\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardBody, CardTitle, Container, Row, Col, FormGroup, Input } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport _ from \"lodash/fp\";\nimport { fetchDriver } from '../../store/actions';\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Driver(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const driverId = props.match.params.id;\n  const [driver, setDriver] = useState();\n  useEffect(() => {\n    let currentDriver = props.drivers.find(item => item.id == driverId);\n    setDriver(currentDriver);\n    console.log(driver);\n  }, []);\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"driver view page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: \"4\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-control-label\",\n                  htmlFor: \"firstname\",\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"name\",\n                  name: \"name\",\n                  placeholder: \"Name\",\n                  type: \"text\" // value={driver.name}\n                  ,\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 37\n                }, this), _.get(\"name.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 41\n                }, this), _.get(\"name.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Name should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"4\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-control-label\",\n                  htmlFor: \"email\",\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"email\",\n                  placeholder: \"Email\" // value={currentDriver.email}\n                  ,\n                  type: \"email\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 37\n                }, this), _.get(\"email.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 41\n                }, this), _.get(\"email.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Invalid Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: \"4\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-control-label\",\n                  htmlFor: \"lastname\",\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"address\",\n                  placeholder: \"Address\",\n                  type: \"text\" // value={currentDriver.address}\n                  ,\n                  innerRef: register({\n                    required: true\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 37\n                }, this), _.get(\"address.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: \"4\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-control-label\",\n                  htmlFor: \"lastname\",\n                  children: \"Phone\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"phone\",\n                  placeholder: \"Phone No\",\n                  type: \"number\" // value={currentDriver.phone}\n                  ,\n                  innerRef: register({\n                    required: true\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 37\n                }, this), _.get(\"phone.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                className: \"btn-info\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Driver, \"PBoqgWQdKDULkS8uNQXqaTTxAjo=\", false, function () {\n  return [useForm];\n});\n\n_c = Driver;\n\nconst mapStateToProps = state => {\n  return {\n    drivers: state.driver.drivers\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchDriver\n})(Driver);\n\nvar _c;\n\n$RefreshReg$(_c, \"Driver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/Driver.js"],"names":["React","useEffect","useState","AddDriver","Breadcrumb","BreadcrumbItem","Button","Card","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","useForm","_","fetchDriver","connect","Driver","props","register","handleSubmit","watch","errors","driverId","match","params","id","driver","setDriver","currentDriver","drivers","find","item","console","log","onSubmit","data","required","pattern","get","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React , {useEffect, useState} from \"react\";\nimport AddDriver from './AddDriver';\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport _ from \"lodash/fp\";\nimport { fetchDriver } from '../../store/actions';\nimport { connect } from \"react-redux\";\n\n\nfunction Driver(props){\n\n\tconst { register, handleSubmit, watch, errors } = useForm();\n\tconst driverId =  props.match.params.id;\n\tconst [driver, setDriver]= useState();\n\tuseEffect(() => {\n\t\tlet currentDriver= props.drivers.find((item) => item.id == driverId);\n\t\tsetDriver(currentDriver);\n\t\tconsole.log(driver);\n\t },[]);\n\tconst onSubmit =  data  => {\n      console.log(data);\n    }\n\treturn(\n\t\t<Container fluid>\n\t\t\t<h1>driver view page</h1>\n\t\t\t<Card className=\"mb-4\">\n                <CardBody>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <Row>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label\n                                      className=\"form-control-label\"\n                                      htmlFor=\"firstname\"\n                                    >\n                                    Name\n                                    </label>\n                                    <Input\n                                      id=\"name\"\n                                      name=\"name\"\n                                      placeholder=\"Name\"\n                                      type=\"text\"\n                                      // value={driver.name}\n                                      innerRef={register({\n                                          required: true,\n                                          pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"name.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"name.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Name should be letters only</p>\n                                    )}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label\n                                      className=\"form-control-label\"\n                                      htmlFor=\"email\"\n                                    >\n                                    Email\n                                    </label>\n                                    <Input\n                                      name=\"email\"\n                                      placeholder=\"Email\"\n                                      // value={currentDriver.email}\n                                      type=\"email\"\n                                      innerRef={register({\n                                      required: true,\n                                      pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n                                    })}\n                                    />\n                                    {_.get(\"email.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"email.type\", errors) === \"pattern\" && (\n                                       <p className=\"error-message\">Invalid Email</p>\n                                    )}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label\n                                      className=\"form-control-label\"\n                                      htmlFor=\"lastname\"\n                                    >\n                                    Address\n                                    </label>\n                                    <Input\n                                      name=\"address\"\n                                      placeholder=\"Address\"\n                                      type=\"text\"\n                                      // value={currentDriver.address}\n                                      innerRef={register({\n                                          required: true,\n                                        })}\n                                    />\n                                     {_.get(\"address.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                           \n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label\n                                      className=\"form-control-label\"\n                                      htmlFor=\"lastname\"\n                                    >\n                                    Phone\n                                    </label>\n                                    <Input\n                                      name=\"phone\"\n                                      placeholder=\"Phone No\"\n                                      type=\"number\"\n                                      // value={currentDriver.phone}\n                                      innerRef={register({\n                                          required: true,\n                                        })}\n                                    />\n                                     {_.get(\"phone.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                            </Col>\n                        </Row>\n                    </form>\n                </CardBody>\n            </Card>\n\t\t</Container>\n\t);\n}\nconst mapStateToProps = (state) => {\n  return {\n    drivers:state.driver.drivers\n  };\n};\n\nexport default connect(mapStateToProps, { fetchDriver })(Driver);\n"]},"metadata":{},"sourceType":"module"}