{"ast":null,"code":"import { fork, put, all, call, takeEvery } from 'redux-saga/effects';\nimport { addDriverSuccessful, fetchDriverSuccessful, fetchDriverFailed } from './actions';\nimport { ADD_DRIVER, FETCH_DRIVER } from './actionTypes';\nimport { baseUrl } from '../../helpers/api';\nimport axios from 'axios';\n\nfunction* addDriver({\n  payload\n}) {\n  try {\n    const response = yield call(axios.post(`${baseUrl}/drivers`, payload));\n    yield put(addDriverSuccessful()); // history.push(\"/driver-list\");\n  } catch (error) {// yield put(loginError(error));\n  }\n}\n\nexport function* watchAddDriver() {\n  yield takeEvery(ADD_DRIVER, addDriver);\n}\nexport function* addDriverSaga() {\n  yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n  try {\n    const response = yield call(getDriver);\n    console.log(response.data);\n    yield put(fetchDriverSuccessful(response.data));\n  } catch (error) {\n    console.log(error);\n    yield put(fetchDriverFailed(error));\n  }\n}\n\nfunction getDriver() {\n  console.log(\"test1s\");\n  return;\n  axios.get(`${baseUrl}/drivers`).then(response => {\n    if (response.status >= 200 && response.status <= 299) {\n      console.log(response.data);\n      return {\n        data: response.data\n      };\n    }\n  });\n}\n\nexport function* watchFetchDriver() {\n  yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\nexport function* fetchDriverSaga() {\n  yield all([fork(watchFetchDriver)]);\n}","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/store/driver/saga.js"],"names":["fork","put","all","call","takeEvery","addDriverSuccessful","fetchDriverSuccessful","fetchDriverFailed","ADD_DRIVER","FETCH_DRIVER","baseUrl","axios","addDriver","payload","response","post","error","watchAddDriver","addDriverSaga","fetchDriver","getDriver","console","log","data","get","then","status","watchFetchDriver","fetchDriverSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,mBAAT,EAA8BC,qBAA9B,EAAqDC,iBAArD,QAA6E,WAA7E;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,eAAzC;AACA,SAASC,OAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAiC;AAC7B,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMX,IAAI,CAACQ,KAAK,CAACI,IAAN,CAAY,GAAEL,OAAQ,UAAtB,EAAiCG,OAAjC,CAAD,CAA3B;AACI,UAAMZ,GAAG,CAACI,mBAAmB,EAApB,CAAT,CAFJ,CAGI;AACH,GAJL,CAKA,OAAOW,KAAP,EAAc,CACV;AACH;AACJ;;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC9B,QAAMb,SAAS,CAACI,UAAD,EAAaI,SAAb,CAAf;AACH;AAED,OAAO,UAAUM,aAAV,GAA0B;AAC7B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACiB,cAAD,CAAL,CAAD,CAAT;AACH;;AAED,UAAUE,WAAV,GAAwB;AACpB,MAAI;AACA,UAAML,QAAQ,GAAG,MAAMX,IAAI,CAACiB,SAAD,CAA3B;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,IAArB;AAEA,UAAMtB,GAAG,CAACK,qBAAqB,CAACQ,QAAQ,CAACS,IAAV,CAAtB,CAAT;AACP,GALD,CAMA,OAAOP,KAAP,EAAc;AACVK,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,UAAMf,GAAG,CAACM,iBAAiB,CAACS,KAAD,CAAlB,CAAT;AACH;AACJ;;AAED,SAASI,SAAT,GAAoB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA;AACIX,EAAAA,KAAK,CAACa,GAAN,CAAW,GAAEd,OAAQ,UAArB,EAAiCe,IAAjC,CAAuCX,QAAD,IAAa;AAC/C,QAAGA,QAAQ,CAACY,MAAT,IAAmB,GAAnB,IAA0BZ,QAAQ,CAACY,MAAT,IAAkB,GAA/C,EAAmD;AAC/CL,MAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,IAArB;AACA,aAAO;AAACA,QAAAA,IAAI,EAACT,QAAQ,CAACS;AAAf,OAAP;AACH;AACJ,GALD;AAOP;;AACD,OAAO,UAAUI,gBAAV,GAA6B;AAChC,QAAMvB,SAAS,CAACK,YAAD,EAAeU,WAAf,CAAf;AACH;AAED,OAAO,UAAUS,eAAV,GAA4B;AAC/B,QAAM1B,GAAG,CAAC,CAACF,IAAI,CAAC2B,gBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { fork, put, all, call, takeEvery } from 'redux-saga/effects'\n\nimport { addDriverSuccessful, fetchDriverSuccessful ,fetchDriverFailed} from './actions';\n\nimport { ADD_DRIVER, FETCH_DRIVER } from './actionTypes';\nimport { baseUrl} from '../../helpers/api';\nimport axios from 'axios';\n\n\nfunction* addDriver({ payload }) {\n    try {\n        const response = yield call(axios.post(`${baseUrl}/drivers`, payload ));\n            yield put(addDriverSuccessful());\n            // history.push(\"/driver-list\");\n        }\n    catch (error) {\n        // yield put(loginError(error));\n    }\n}\n\nexport function* watchAddDriver() {\n    yield takeEvery(ADD_DRIVER, addDriver);\n}\n\nexport function* addDriverSaga() {\n    yield all([fork(watchAddDriver)]);\n}\n\nfunction* fetchDriver() {\n    try {\n        const response = yield call(getDriver);\n            console.log(response.data);\n        \n            yield put(fetchDriverSuccessful(response.data));\n    }\n    catch (error) {\n        console.log(error)\n        yield put(fetchDriverFailed(error));\n    }\n}\n\nfunction getDriver(){\n    console.log(\"test1s\")\n    return\n        axios.get(`${baseUrl}/drivers` ).then((response) =>{\n            if(response.status >= 200 && response.status <=299){\n                console.log(response.data)\n                return {data:response.data}\n            }\n        })\n    \n}\nexport function* watchFetchDriver() {\n    yield takeEvery(FETCH_DRIVER, fetchDriver);\n}\n\nexport function* fetchDriverSaga() {\n    yield all([fork(watchFetchDriver)]);\n}\n"]},"metadata":{},"sourceType":"module"}