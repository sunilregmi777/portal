{"ast":null,"code":"var _jsxFileName = \"/home/sunil/Karyathalo/admin-portal/src/pages/driver/info/Address.js\",\n    _s = $RefreshSig$();\n\nimport { Breadcrumb, BreadcrumbItem, Button, Card, CardHeader, CardBody, CardTitle, Container, Row, Col, FormGroup, Input, Label } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState } from 'react';\nimport _ from \"lodash/fp\";\nimport '../driver.scss';\nimport { connect } from \"react-redux\";\nimport API from '../../../helpers/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AddDriver(props) {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm({\n    mode: 'onChange'\n  });\n  const history = useHistory();\n  const [drivers, setDrivers] = useState([]);\n  const [address1Class, setAddress1Class] = useState('');\n  const [address2Class, setAddress2Class] = useState('');\n  const [cityClass, setCityClass] = useState('');\n  const [stateClass, setStateClass] = useState('');\n  const [countryClass, setcountryClass] = useState('');\n\n  const OnSubmit = async data => {\n    const response = await API('drivers', 'POST', data);\n\n    if (response.id) {\n      history.push('/driver-list');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      lg: \"6\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: \"Driver Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(OnSubmit),\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"address1\",\n                  children: \"Address 1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"address1\",\n                  className: address1Class,\n                  placeholder: \"Address1\",\n                  type: \"text\",\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setAddress1Class(errors.address1 ? \"is-invalid\" : \"is-valid\");\n                    } else setAddress1Class(\"is-invalid\");\n                  },\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 37\n                }, this), _.get(\"address1.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 41\n                }, this), _.get(\"address1.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Address should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"address2\",\n                  children: \"Address 2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"address2\",\n                  className: address2Class,\n                  placeholder: \"Address2\",\n                  type: \"text\",\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setAddress2Class(errors.address2 ? \"is-invalid\" : \"is-valid\");\n                    } else setAddress2Class(\"is-invalid\");\n                  },\n                  innerRef: register({\n                    required: false,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 37\n                }, this), _.get(\"address2.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Address should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"city\",\n                  children: \"City\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"city\",\n                  className: cityClass,\n                  placeholder: \"City\",\n                  type: \"text\",\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setCityClass(errors.city ? \"is-invalid\" : \"is-valid\");\n                    } else setCityClass(\"is-invalid\");\n                  },\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 37\n                }, this), _.get(\"city.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 41\n                }, this), _.get(\"city.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"City should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"state\",\n                  children: \"Mobile\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"state\",\n                  className: stateClass,\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setStateClass(errors.state ? \"is-invalid\" : \"is-valid\");\n                    } else setStateClass(\"is-invalid\");\n                  },\n                  placeholder: \"State\",\n                  type: \"number\",\n                  innerRef: register({\n                    required: true,\n                    pattern: /^([0-9])/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 37\n                }, this), _.get(\"state.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 41\n                }, this), _.get(\"state.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Numbers only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                md: \"3\",\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"form-control-label col-form-label\",\n                  htmlFor: \"country\",\n                  children: \"City\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                md: \"9\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  name: \"country\",\n                  className: countryClass,\n                  placeholder: \"City\",\n                  type: \"text\",\n                  onChange: e => {\n                    if (e.target.value.length > 0) {\n                      setcountryClass(errors.country ? \"is-invalid\" : \"is-valid\");\n                    } else setcountryClass(\"is-invalid\");\n                  },\n                  innerRef: register({\n                    required: true,\n                    pattern: /^[A-Za-z]+[A-Za-z]/i\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 37\n                }, this), _.get(\"country.type\", errors) === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"This field is required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 41\n                }, this), _.get(\"country.type\", errors) === \"pattern\" && /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-message\",\n                  children: \"Country should be letters only\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              className: \"float-right\",\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  className: \"btn-info\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(AddDriver, \"P/rWpqtLmPpumBUYU7CxheTrIMQ=\", false, function () {\n  return [useForm, useHistory];\n});\n\n_c = AddDriver;\nexport default AddDriver;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDriver\");","map":{"version":3,"sources":["/home/sunil/Karyathalo/admin-portal/src/pages/driver/info/Address.js"],"names":["Breadcrumb","BreadcrumbItem","Button","Card","CardHeader","CardBody","CardTitle","Container","Row","Col","FormGroup","Input","Label","useForm","useHistory","React","useEffect","useState","_","connect","API","AddDriver","props","register","handleSubmit","watch","errors","mode","history","drivers","setDrivers","address1Class","setAddress1Class","address2Class","setAddress2Class","cityClass","setCityClass","stateClass","setStateClass","countryClass","setcountryClass","OnSubmit","data","response","id","push","e","target","value","length","address1","required","pattern","get","address2","city","state","country"],"mappings":"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","sourcesContent":["import {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    Container,\n    Row,\n    Col,\n    FormGroup,\n    Input,\n    Label\n  } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useEffect, useState} from 'react';\nimport _ from \"lodash/fp\";\nimport '../driver.scss';\nimport { connect } from \"react-redux\";\nimport API from '../../../helpers/api';\n\n\n  function AddDriver(props){\n    const { register, handleSubmit, watch, errors } = useForm({\n        mode: 'onChange'\n    });\n    const history = useHistory();\n    const[drivers, setDrivers]=useState([]);\n    const[address1Class, setAddress1Class] = useState('');\n    const[address2Class, setAddress2Class] = useState('');\n    const[cityClass, setCityClass] = useState('');\n    const[stateClass, setStateClass] = useState('');\n    const[countryClass, setcountryClass] = useState('');\n\n    const OnSubmit = async (data)  => {\n      const response = await API('drivers', 'POST', data);\n      if(response.id){\n        history.push('/driver-list');\n      }\n    }\n\n    return(\n        <>\n            <Col lg=\"6\">\n                <Card>\n                    <CardHeader>\n                        <h3 className=\"mb-0\">Driver Address</h3>\n                    </CardHeader>\n                    <CardBody>\n                        <form onSubmit={handleSubmit(OnSubmit)}>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"address1\"\n                                    >\n                                    Address 1\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"address1\"\n                                        className={address1Class}\n                                        placeholder=\"Address1\"\n                                        type=\"text\"\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setAddress1Class(errors.address1?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setAddress1Class(\"is-invalid\")\n                                        }}                                                \n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"address1.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"address1.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Address should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"address2\"\n                                    >\n                                    Address 2\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"address2\"\n                                        className={address2Class}\n                                        placeholder=\"Address2\"\n                                        type=\"text\"\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setAddress2Class(errors.address2?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setAddress2Class(\"is-invalid\")\n                                        }}                                                \n                                        innerRef={register({\n                                        required: false,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"address2.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Address should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"city\"\n                                    >\n                                    City\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"city\"\n                                        className={cityClass}\n                                        placeholder=\"City\"\n                                        type=\"text\"\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setCityClass(errors.city?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setCityClass(\"is-invalid\")\n                                        }}                                                \n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"city.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"city.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">City should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"state\"\n                                    >\n                                    Mobile\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"state\"\n                                        className={stateClass}\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setStateClass(errors.state?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setStateClass(\"is-invalid\")\n                                        }} \n                                        placeholder=\"State\"\n                                        type=\"number\"\n                                        innerRef={register({\n                                            required: true,\n                                            pattern: /^([0-9])/i\n                                        })}\n                                    />\n                                   {_.get(\"state.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"state.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Numbers only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <FormGroup className=\"row\">\n                                <Col md=\"3\">\n                                    <Label\n                                        className=\"form-control-label col-form-label\"\n                                        htmlFor=\"country\"\n                                    >\n                                    City\n                                    </Label>\n                                </Col>\n                                <Col md=\"9\">\n                                    <Input\n                                        name=\"country\"\n                                        className={countryClass}\n                                        placeholder=\"City\"\n                                        type=\"text\"\n                                        onChange = {(e)=>{\n                                            if(e.target.value.length > 0){\n                                                setcountryClass(errors.country?\"is-invalid\":\"is-valid\")\n                                            }\n                                            else setcountryClass(\"is-invalid\")\n                                        }}                                                \n                                        innerRef={register({\n                                        required: true,\n                                        pattern: /^[A-Za-z]+[A-Za-z]/i \n                                        })}\n                                    />\n                                    {_.get(\"country.type\", errors) === \"required\" && (\n                                        <p className=\"error-message\">This field is required</p>\n                                    )}\n                                    {_.get(\"country.type\", errors) === \"pattern\" && (\n                                        <p className=\"error-message\">Country should be letters only</p>\n                                    )}\n                                </Col>\n                            </FormGroup>\n                            <Row className=\"float-right\">\n                                <Col>\n                                    <Button type=\"submit\" className=\"btn-info\">Submit</Button>\n                                </Col>\n                            </Row>\n                        </form>\n                    </CardBody>\n                </Card>\n            </Col>\n        </>\n    );\n}\n\nexport default AddDriver;"]},"metadata":{},"sourceType":"module"}